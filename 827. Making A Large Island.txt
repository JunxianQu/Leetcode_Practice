class Solution {
    public int largestIsland(int[][] grid) {
        List<Integer> size = new ArrayList();
        int n = grid.length;
        HashMap<Integer, List<Integer>> flag = new HashMap();
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                int[] temp = new int[]{i,j};
                if(!flag.containsKey(i*500 + j) && grid[i][j] == 1)
                    size.add(findBorder(grid, i, j, flag, size.size()+1));
            }  
        }
        int max = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                int sum = 0;
                List<Integer> num = flag.get(i*500 + j);
                if(num == null) continue;
                for(int k = 0; k < num.size(); k++) {
                    sum += size.get(num.get(k)-1);
                }
                max = Math.max(max, sum);
            }
        }
        return Math.min(max+1, n*n);
    }
    public int findBorder(int[][] grid, int i, int j, HashMap<Integer, List<Integer>> flag, int index) {
        List<Integer> list = new ArrayList();
        if(grid[i][j] == 0) {
            if(!flag.containsKey(i*500 + j)) {
                list.add(index);
                flag.put(i*500 + j, list);
            } else if (flag.get(i*500 + j).get(flag.get(i*500 + j).size()-1) != index) {
                list = flag.get(i*500 + j);
                list.add(index);
            }
            return 0;
        }
        if(flag.containsKey(i*500 + j)) return 0;
        list.add(index);
        flag.put(500*i + j, list);
        int result = 1;
        if(i > 0 ) {
            result += findBorder(grid, i-1, j, flag, index);
        }
        if(j > 0 ) {
            result += findBorder(grid, i, j-1, flag, index);
        }
        if(i < grid.length-1) {
            result += findBorder(grid, i+1, j, flag, index);
        }
        if(j < grid.length-1) {
            result += findBorder(grid, i, j+1, flag, index);
        }
        return result;
    }
}