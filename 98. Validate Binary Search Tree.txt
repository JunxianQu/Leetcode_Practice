/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        Stack<TreeNode> stk = new Stack();
        searchBST(root, stk);
        int last = stk.pop().val;
        while(!stk.isEmpty()) {
            int current = stk.pop().val;
            if(current <= last) return false;
            last = current;
        }
        return true;
    }
    public void searchBST(TreeNode root, Stack<TreeNode> stk) {
        if(root.left == null && root.right == null) {
            stk.push(root);
            return;
        }
        if(root.right != null) searchBST(root.right, stk);
        stk.push(root);
        if(root.left != null) searchBST(root.left, stk);
        return;
    }
}