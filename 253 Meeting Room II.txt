class Solution {
    public int minMeetingRooms(int[][] intervals) {
        PriorityQueue<int[]> que = new PriorityQueue(new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });
        PriorityQueue<int[]> result = new PriorityQueue(new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2) {
                return o1[1] - o2[1];
            }
        });
        for(int i = 0; i < intervals.length; i++) {
            que.add(intervals[i]);
        }
        int[] temp = new int[2];
        result.add(que.poll());
        for(int i = 1; i < intervals.length; i++) {
            temp = que.poll();
            if( temp[0] >= result.peek()[1]) {
                int[] transfer = result.poll();
                transfer[1] = temp[1];
                result.add(transfer);
            } else {
                result.add(temp);
            }
        }
        return result.size();
    }
}