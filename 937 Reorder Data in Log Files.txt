class Solution {
    class Node{
        String s;
        int val;
    }
    public String[] reorderLogFiles(String[] logs) {
        PriorityQueue<Node> pq = new PriorityQueue(new Comparator<Node>(){
            public int compare(Node o1, Node o2) {
                int i = 0;
                int j = 0;
                while(i < o1.s.length() && o1.s.charAt(i)!=' ') i++;
                while(j < o2.s.length() && o2.s.charAt(j)!=' ') j++;
                while(i < o1.s.length() && j < o2.s.length()) {
                    if(o1.s.charAt(i)-'0' >= 0 && o1.s.charAt(i)-'0' <= 9 && o2.s.charAt(j)-'0' >= 0 && o2.s.charAt(j)-'0' <= 9) return o1.val-o2.val;
                    if(o1.s.charAt(i) != o2.s.charAt(j)) {
                        if((o1.s.charAt(i)-'0' >= 0 && o1.s.charAt(i)-'0' <= 9 && o2.s.charAt(j)-'0' > 9) || o2.s.charAt(j) == ' ') return 1;
                        if((o1.s.charAt(i)-'0' > 9 && o2.s.charAt(j)-'0' >= 0 && o2.s.charAt(j)-'0' <= 9) || o1.s.charAt(i) == ' ') return -1;
                        
                        return o1.s.charAt(i) - o2.s.charAt(j);
                    }
                    i++;
                    j++;
                }
                if(i == o1.s.length() && j == o2.s.length() ) {
                    for(int k = 0; k < o1.s.length(); k++) {
                        if(o1.s.charAt(k) != o2.s.charAt(k)) return o1.s.charAt(k) - o2.s.charAt(k);
                    }
                } else if( i == o1.s.length()) {
                    return -1;
                } else {
                    return 1;
                }
                return 1;
            }
        });
        Node temp;
        for(int i = 0; i < logs.length; i++) {
            temp = new Node();
            temp.val = i;
            temp.s = logs[i];
            pq.add(temp);
        }
        String[] result = new String[logs.length];
        for(int i = 0; i < logs.length; i++) {
            result[i] = pq.poll().s;
        }
        return result;
    }
}