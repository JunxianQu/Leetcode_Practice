/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root == null) return null;
        Queue<Node> que = new LinkedList();
        que.offer(root);
        while(!que.isEmpty()) {
            int size = que.size();
            Node last = que.poll();
            for(int i = 1; i < size; i++) {
                Node current = que.poll();
                if(last.left != null) que.offer(last.left);
                if(last.right != null) que.offer(last.right);
                last.next = current;
                last = current;
            }
            if(last.left != null) que.offer(last.left);
            if(last.right != null) que.offer(last.right);
            last.next = null;
        }
        return root;
    }
}