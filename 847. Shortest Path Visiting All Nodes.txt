class Solution {
    public int shortestPathLength(int[][] graph) {
        boolean[][]seen = new boolean[graph.length][1<<graph.length];
        Queue<int[]> que = new LinkedList();
        for(int i = 0; i < graph.length; i++) {
            seen[i][1<<i] = true;
            que.offer(new int[]{i, 1<<i, 0});
        }
        int res = 0;
        while(!que.isEmpty()) {
            int[] temp = que.poll();
            int mark = temp[1];
            if(mark == (1<<graph.length)-1) {
                res = temp[2];
                break;
            }
            for(int g : graph[temp[0]]) {
                int markv = mark | (1<<g);
                if(!seen[g][markv]) {
                    que.offer(new int[]{g, markv, temp[2]+1});
                    seen[g][markv] = true;
                }
            }
        }
        return res;
    }
}
