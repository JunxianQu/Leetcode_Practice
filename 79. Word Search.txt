class Solution {
    public boolean exist(char[][] board, String word) {
        int[][] flag = new int[board.length][board[0].length];
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) {
                // if(board[i][j] != word.charAt(0)) continue;
                
                if(findWord(board, flag, word, i, j)) return true;
            }
        }
        return false;
    }
    public boolean findWord(char[][] board, int[][] flag, String word, int i, int j) {
        if(flag[i][j] == 1) return false;
        if(word.length() == 1 && word.charAt(0) == board[i][j]) {
            return true;
        }
        char c = word.charAt(0);
        if(c != board[i][j]) return false;
        boolean res = false;
        
        
        flag[i][j] = 1;
        if(i > 0) {
            res |= findWord(board, flag, word.substring(1, word.length()), i-1, j);
        }
        if(j > 0) {
            res |= findWord(board, flag, word.substring(1, word.length()), i, j-1);
        }
        if(i < board.length-1) {
            res |= findWord(board, flag, word.substring(1, word.length()), i+1, j);
        }
        if(j < board[0].length-1) {
            res |= findWord(board, flag, word.substring(1, word.length()), i, j+1);
        }
        flag[i][j] = 0;
        return res;
    }
}