class TicTacToe {
    int n;
    Map<Integer, Integer> aRow;
    Map<Integer, Integer> aCol;
    Map<Integer, Integer> bRow;
    Map<Integer, Integer> bCol;
    int aDia1, aDia2;
    int bDia1, bDia2;
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        this.n = n;
        aDia1 = aDia2 = bDia1 = bDia2 = 0;
        aRow = new HashMap();
        aCol = new HashMap();
        bRow = new HashMap();
        bCol = new HashMap();
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        if(player == 1) {
            if(col == row) aDia1++;
            if(col+row == n-1) aDia2++;
            int r = aRow.getOrDefault(row, 0);
            aRow.put(row, r+1);
            int c = aCol.getOrDefault(col, 0);
            aCol.put(col, c+1);
            if(c+1 == n || r+1 == n || aDia1 == n || aDia2 == n) return 1;
        } else {
            if(col == row) bDia1++;
            if(col+row == n-1) bDia2++;
            int r = bRow.getOrDefault(row, 0);
            bRow.put(row, r+1);
            int c = bCol.getOrDefault(col, 0);
            bCol.put(col, c+1);
            if(c+1 == n || r+1 == n || bDia1 == n || bDia2 == n) return 2;
        }
        return 0;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */