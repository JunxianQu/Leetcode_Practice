class Solution {
    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {
        List<int[]> resultList = new ArrayList();
        int[][] intervals = new int[firstList.length+secondList.length][2];
        for(int i = 0; i < intervals.length; i++) {
            if(i < firstList.length) intervals[i] = firstList[i];
            else intervals[i] = secondList[i-firstList.length];
        }
        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });
        int[] last = new int[]{-1,-1};
        for(int[] interval : intervals) {
            if(interval[0] <= last[1]) {
                resultList.add(new int[] {interval[0], Math.min(last[1],interval[1])});                
            }
            last = interval[1] > last[1] ? interval: last;
        }
        int[][] result = new int[resultList.size()][2];
        for(int i = 0; i < resultList.size(); i++) {
            result[i] = resultList.get(i);
        }
        return result;
    }
}