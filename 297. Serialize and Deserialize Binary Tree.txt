/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) return "";
        Queue<TreeNode> que = new LinkedList();
        que.offer(root);
        String res = "";
        while(!que.isEmpty()) {
            int size = que.size();
            for(int i = 0; i < size; i++) {
                TreeNode temp = que.poll();
                if(temp == null) {
                    res = res + "null,";
                } else {
                    res = res + temp.val + ",";
                    que.offer(temp.left);
                    que.offer(temp.right);
                }
            }
        }
        return res.substring(0, res.length()-1);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.length() == 0) return null;
        String[] s = data.split(",");
        TreeNode root = new TreeNode();
        Queue<TreeNode> que = new LinkedList();
        que.offer(root);
        for(int i = 0; i < s.length;) {
            int size = que.size();
            for(int j = 0; j < size; j++) {
                TreeNode temp = que.poll();
                if(!s[i].equals("null")) {
                    temp.val = Integer.parseInt(s[i]);
                    temp.left = new TreeNode(Integer.MIN_VALUE/10);
                    temp.right = new TreeNode(Integer.MIN_VALUE/10);
                    que.offer(temp.left);
                    que.offer(temp.right);
                }
                i++;
            }
        }
        que.offer(root);
        while(!que.isEmpty()) {
            int size = que.size();
            for(int i = 0; i < size; i++) {
                TreeNode temp = que.poll();
                if(temp.left.val == Integer.MIN_VALUE/10) {
                    temp.left = null;
                } else {
                    que.offer(temp.left);
                }
                if(temp.right.val == Integer.MIN_VALUE/10) {
                    temp.right = null;
                } else {
                    que.offer(temp.right);
                }
                
            }
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));